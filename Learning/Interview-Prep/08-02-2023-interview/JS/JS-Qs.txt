JS:

https://jsbin.com/fazurusufi/3/edit?js,console
1.Arrow function vs Normal function in JS
	https://betterprogramming.pub/difference-between-regular-functions-and-arrow-functions-f65639aba256
	1. Syntax
	// (param1, param2, paramN) => expression
	// ES5
	var add = function(x, y) {
  		return x + y;
	};
	// ES6
	let add = (x, y) => { return x + y };
	2. Arguments binding
		-Arrow functions can never have duplicate named parameters, whether in strict or non-strict mode.
		-Arrow functions do not have an arguments binding. However, they have access to the arguments object of the closest non-arrow parent function. Named and rest parameters are heavily relied upon to capture the arguments passed to arrow functions.
		-Arrow functions can never be used as constructor functions. Hence, they can never be invoked with the new keyword. As such, a prototype property does not exist for an arrow function.
		-The value of this inside an arrow function remains the same throughout the lifecycle of the function and is always bound to the value of this in the closest non-arrow parent function.
	3. Use of this keyword:
	Unlike regular functions, arrow functions do not have their own this. The value of this inside an arrow function remains the same throughout the lifecycle of the function and is always bound to the value of this in the closest non-arrow parent function.
	const me = {
    			name : "Sameer",
    			printName : ()=>{
        			return `My name is ${this.name}`  // no this reference inside normal function
    			},
    			printNameRegular: function() {
        			return `My name is ${this.name}`  // this reference is availble inside normal function
    			}
		}
		console.log(me.printName());
		console.log(me.printNameRegular());
	4. Using new keyword:
	Regular functions created using function declarations or expressions are constructible and callable. Since regular functions are constructible, they can be called using the new keyword.
	However, the arrow functions are only callable and not constructible, i.e arrow functions can never be used as constructor functions. Hence, they can never be invoked with the new keyword.
	const constructorNormal = function(a,b){
    					console.log(a + b);
				}
	const constructorArrow = (a,b)=>{
    					console.log(a + b);
				}
	const obj1 = new constructorNormal(2,3);
	const obj2 = new constructorArrow(2,3);
	console.log(obj1);  // normal method is both callable and constructable
	console.log(obj2);  // arrow method only callable not constructable

	5. No duplicate named parameters:
	Arrow functions can never have duplicate named parameters, whether in strict or non-strict mode.
	It means that the following is valid JavaScript:
		function add(x, x){}
	It is not, however, when using strict mode:
		'use strict';
		function add(x, x){}
		// SyntaxError: duplicate formal argument x
	With arrow functions, duplicate named arguments are always, regardless of strict or non-strict mode, invalid.
		(x, x) => {}
		// SyntaxError: duplicate argument names not allowed in this context
	-Syntax
	-No arguments (arguments are array-like objects) (we can use rest parameter way of accessing)
	-No prototype object for the Arrow function
	-Cannot be invoked with a new keyword (Not a constructor function)
	-No own this (call, apply & bind won't work as expected)
	-It cannot be used as a Generator function
	-Duplicate-named parameters are not allowed
	
	const norm = function(a){
    		return a + this.b;
	}
	const arro = (a)=>{
    		console.log(a);
   		return a + this.b;
	}
	let res = norm.call(data,5);
	console.log(res);
	let res1 = arro.call(data,5);
	console.log(res1);
	let res2 = arro.apply(data,[6]);
	console.log(res2);
	let add2 = arro.bind(data,2);
	console.log(add2());

	https://blog.bitsrc.io/arrow-functions-vs-regular-functions-in-javascript-458ccd863bc1

		
	

2.Map , filter, reduce methods

	Higher Order Functions:
		A higher-order function is a function that takes one or more functions as arguments or returns a function as its result. map, filter, andreduce are all higher order functions, which take a function as an argument.
		All the functions are part of the JavaScript Array prototype which means they must be called directly on an array.

		const arr = [1, 2, 3]
		arr.map()
		arr.filter()
		arr.reduce()
		When we are using map,filter, and reduce, we cannot:
		-break the loop
		-use continue
	map → Executes a function on each element of an array:
		Every element of the array is passed to the callback function and returns a new array with the same length.
		When to use map: If we want to perform the same operation/transformation on each element of the array and get back a new array of the same length with the transformed values.
	filter → Remove items which don’t satisfy a condition:
		Every element of the array is passed to the callback function. On each iteration, if the callback returns true, then that element will be added to the new array, otherwise, it is not added to the new array.
	Reduce → Creates a single value from elements of Array:
		While using reduce, we need to declare the initial value of accumulator(final result). On each iteration, inside the callback we perform some operation and that will be added to the accumulator.
	let users = [
        {
            userName : "student1"
        },
        {
            userName : "student2"
        },
        {
            userName : "student3"
        },
        {
            userName : "student4"
        }
    	]
	console.log(users);
	let marks = users.map((user)=>{
    	let marks = Math.random() * 100;
    	user.marks = marks;
    	return user;
	})
	console.log(marks);
	let passed = users.filter((user)=>{
    	return user.marks > 50;
	})
	console.log(passed);
	let team = passed.reduce((acc,user)=>{
    	if(user.marks > 70){
        	acc.push(user);
    	}
    	return acc;
	},[])

	console.log(team);

	https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209
	Gotchas: (.map)
	The callback you pass to map must have an explicit return statement, or map will spit out an array full of undefined. It's not hard to remember to include a return value, but it's not hard to forget. 

	If you do forget, map won't complain. Instead, it'll quietly hand back an array full of nothing. Silent errors like that can be surprisingly hard to debug. 

	Fortunately, this is the only gotcha with map. But it's a common enough pitfall that I'm obliged to emphasize: Always make sure your callback contains a return statement!
	
	Gotchas: (.filter):
	The callback you pass to map has to include a return statement if you want it to function properly. With filter, you also have to include a return statement (unless you're using arrow functions), and you must make sure it returns a boolean value.

	If you forget your return statement, your callback will return undefined, which filter will unhelpfully coerce to false. Instead of throwing an error, it will silently return an empty array! 

	If you go the other route and return something that's isn't explicitly true or false, then filter will try to figure out what you meant by applying JavaScript's type coercion rules. More often than not, this is a bug. And, just like forgetting your return statement, it'll be a silent one. 

	Always make sure your callbacks include an explicit return statement. And always make sure your callbacks in filter return true or false. Your sanity will thank you

	Gotchas: (.reduce)
	The three big gotchas with reduce are:

	forgetting to return
	forgetting an initial value
	expecting an array when reduce returns a single value

	Fortunately, the first two are easy to avoid. Deciding what your initial value should be depends on what you're doing, but you'll get the hang of it quickly.

	The last one might seem a bit strange. If reduce only ever returns a single value, why would you expect an array?

	There are a few good reasons for that. First, reduce always returns a single value, not always a single number. If you reduce an array of arrays, for instance, it will return a single array. If you're in the habit of reducing arrays, it would be fair to expect that an array containing a single item wouldn't be a special case.

	Second, if reduce did return an array with a single value, it would naturally play nice with map and filter, and other functions on arrays that you're likely to be using with it.
	
	.sort():
	https://dev.to/ivanadokic/javascript-array-methods-filter-map-reduce-and-sort-32m5
	The sort() method sorts the elements of an array in place and returns the sorted array.
	arr.sort([compareFunction])
	Ascending order:
	students.sort((a, b) => {
    		return a.age - b.age;
	});
	Descending order:
	students.sort((a, b) => b.age - a.age);
	Akshyai Saini : https://www.youtube.com/watch?v=zdp0zrpKzIE



3.Call back and call back hell:
	https://maximorlov.com/synchronous-vs-asynchronous-callbacks/#:~:text=The%20main%20difference%20between%20synchronous,like%20PHP%2C%20Ruby%20or%20Java.
	ability to pass the function as parameter to the other function and it can be called later point in the execution is call call back.
	Uses:
	-for making asynchronous calls
	-bringing modularity in the code(making specific tasks seperately);
	-
	(synchronous callback function):
	synchronous callbacks are executed within the program's current context and there's no interaction with the outside world. You'll find synchronous callbacks in functional programming where, for example, the callback is called for each item in a collection (eg. .filter(), .map(), .reduce() etc.). Most prototype methods in the JavaScript language are synchronous.
	A callback's primary purpose is to execute code in response to an event. These events might be user-initiated, such as mouse clicks or typing. With a callback, you may instruct your application to "execute this code every time the user clicks a key on the keyboard."
	const button = document.getElementById('myName');
	function callback(){
		console.log("My Name is Sameer");
	}
	(Asynchronous Callback Function):
	Asynchronous functions are usually the ones that do a network request, wait for an I/O operation (like a mouse click), interact with the filesystem or send a query to a database. What these functions have in common is that they interact with something outside the current program and your application is left waiting until a response comes back.
	
	To avoid call back hell confusion we can do following things: 
	Write comments
	Split functions into smaller functions
	Using Promises
	Using Async/await
	
	getUser(1, (user) => {
	//     console.log("User", user);
	//     getRepositories(user.githubUsername, (repos) => {
	//         console.log(repos);
	//         getCommits(repos[0], (commits) => {
	//             console.log(commits);
	//             // Callback Hell ("-_-)
	//         })
	//     })
	// })


button.addEventListener('click',callback);
4.Hoisting with example:
	JavaScript Hoisting refers to the process whereby the interpreter appears to move the declaration of functions, variables or classes to the top of their scope, prior to execution of the code.
	In colloquial terms, any of the following behaviors may be regarded as hoisting:
	Variable hoisting:
		var-declared variables are hoisted, meaning you can refer to the variable anywhere in its scope, even if its declaration isn't reached yet. You can see var declarations as being "lifted" to the top of its function or global scope. However, if you access a variable before it's declared, the value is always undefined, because only its declaration is hoisted, but not its initialization.
		Unlike var declarations, which only hoist the declaration but not its value, function declarations are hoisted entirely — you can safely call the function anywhere in its scope. See the hoisting glossary entry for more discussion.
		
5.Virtual dom vs real dom:
	https://medium.com/devinder/react-virtual-dom-vs-real-dom-23749ff7adc9
	(DOM):
	The DOM is an abstraction of a page’s HTML structure
	It takes HTML elements and wraps them in an object with a tree-structure — maintaining the parent/child relationships of those nested HTML elements. This provides an API that allows us to traverse nodes (HTML elements) and manipulate them in a number of ways — such as adding nodes, removing nodes, editing a node’s content, etc.
	Real Dom: is an object which represents the tree like structure of the html document.
	Virtual Dom : is an virtually created copy of real Dom object which is used for data - comparision and real dom change if must.
	Now it’s common to have a thousands node in a single SPA. So repaint the whole page for each change is very-very expensive.
	Ideally, we’d like to only re-render items that receive updates, leaving the rest of the items as-is.
	Knowing when to update:
		-Dirty Checking (slow) — Checks through all node’s data at a regular interval to see if there have been any changes. This is inefficient because it requires traversing every single node recursively to make sure it’s data isn’t “dirty” (out of date). This was used in AngularJS 1.x.
		-Observable (fast) — Components are responsible for listening to when an update takes place. Since the data is saved on the state, components can simply listen to events on the state and if there is an update, it can re-render to the UI. React uses it.
	(Virtual DOM):
	The Virtual DOM is a light-weight abstraction of the DOM. You can think of it as a copy of the DOM, that can be updated without affecting the actual DOM. It has all the same properties as the real DOM object, but doesn’t have the ability to write to the screen like the real DOM. The virtual DOM gains it’s speed and efficiency from the fact that it’s lightweight. In fact, a new virtual DOM is created after every re-render.
	Reconciliation is a process to compare and keep in sync the two files (Real and Virtual DOM). Diffing algorithm is a technique of reconciliation which is used by React.
	Is the Shadow DOM the same as the Virtual DOM?
		-No, they are different. The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components. The virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs

6.Event loop , call stack, stack queue
	https://medium.com/@Rahulx1/understanding-event-loop-call-stack-event-job-queue-in-javascript-63dcd2c71ecd
	Stack: This is where all your javascript code gets pushed and executed one by one as the interpreter reads your program, and gets popped out once the execution is done. 
	If your statement is asynchronous: setTimeout, ajax(), promise, or click event, then that code gets forwarded to Event table, this table is responsible for moving your asynchronous code to callback/event queue after specified time.
	Heap: This is where all the memory allocation happens for your variables, that you have defined in your program.
	Callback Queue: This is where your asynchronous code gets pushed to, and waits for the execution
	Event Loop: Then comes the Event Loop, which keeps running continuously and checks the Main stack, if it has any frames to execute, if not then it checks Callback queue, if Callback queue has codes to execute then it pops the message from it to the Main Stack for the execution.
	Job Queue: Apart from Callback Queue, browsers have introduced one more queue which is “Job Queue”, reserved only for new Promise() functionality. So when you use promises in your code, you add .then() method, which is a callback method. These `thenable` methods are added to Job Queue once the promise has returned/resolved, and then gets executed.

	console.log('Message no. 1: Sync');
	setTimeout(function() {
   	console.log('Message no. 2: setTimeout');
	}, 0);
	var promise = new Promise(function(resolve, reject) {
   	resolve();
	});
	promise.then(function(resolve) {
   	console.log('Message no. 3: 1st Promise');
	})
	.then(function(resolve) {
   	console.log('Message no. 4: 2nd Promise');
	});
	console.log('Message no. 5: Sync');
	// Message no. 1: Sync
	// Message no. 5: Sync
	// Message no. 3: 1st Promise
	// Message no. 4: 2nd Promise
	// Message no. 2: setTimeout
	CALL STACK:
	-https://felixgerschau.com/javascript-event-loop-call-stack/
	JavaScript can do one single thing at a time because it has only one call stack.
	The call stack is a mechanism that helps the JavaScript interpreter to keep track of the functions that a script calls.
	Every time a script or function calls a function, it's added to the top of the call stack. Every time the function exits, the interpreter removes it from the call stack.
	A function either exits through a return statement or by reaching the end of the scope.
	The order in which the stack processes each function call follows the LIFO principle (Last In, First Out).
	-1. Global Execution Context(Heap, call stack,web api, event loop call back queue)
	-2. Functional Execution Context
	HEAP-Memory Allocation in JS:
		-https://felixgerschau.com/javascript-memory-management/
		Allocating memory is the process of reserving space in memory, while releasing memory frees up space, ready to be used for another purpose.
			Allocate memory:
			JavaScript takes care of this for us: It allocates the memory that we will need for the object we created
			Use memory:
			Using memory is something we do explicitly in our code: Reading and writing to memory is nothing else than reading or writing from or to a variable.
			Release memory:
			This step is handled as well by the JavaScript engine. Once the allocated memory is released, it can be used for a new purpose.
		"Objects" in the context of memory management doesn't only include JS objects but also functions and function scopes.
	https://felixgerschau.com/javascript-event-loop-call-stack/
	https://felixgerschau.com/javascript-memory-management/
	Web APIs: https://felixgerschau.com/web-capabilities-project-fugu-google/
		They enable you to make AJAX requests or manipulate the DOM, but also a range of other things, like geo-tracking, accessing local storage, service workers, and more.
	Callback queue:
		With the features of web APIs, we're now able to do things concurrently outside of the JavaScript interpreter. But what happens if we want our JavaScript code to react to the result of a Web API, like an AJAX request, for instance?
		That's where callbacks come into play. Through them, web APIs allow us to run code after the execution of the API call has finished.
		Unlike the call stack, the callback queue follows the FIFO order (First In, First Out), meaning that the calls are processed in the same order they've been added to the queue.
	Event loop:
		The JavaScript event loop takes the first call in the callback queue and adds it to the call stack as soon as it's empty.
		window.onscroll = () => console.log('scroll');
		
	Job queue and asynchronous code:
		In addition to the callback queue, there's another queue that exclusively accepts promises—the job queue.
		The job queue, also known as the promise queue, has priority over the callback queue, just like a fast-track queue at an amusement park.
		
7.promise, settimeout
	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
	The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
	-pending: initial state, neither fulfilled nor rejected.
	-fulfilled: meaning that the operation was completed successfully.
	-rejected: meaning that the operation failed.
	The eventual state of a pending promise can either be fulfilled with a value or rejected with a reason (error). When either of these options occur, the associated handlers queued up by a promise's then method are called. If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached.
	const myPromise = new Promise((resolve, reject) => {
  	setTimeout(() => {
    	resolve("foo");
  	}, 300);
	});

	myPromise
  	.then(handleFulfilledA, handleRejectedA)
  	.then(handleFulfilledB, handleRejectedB)
  	.then(handleFulfilledC, handleRejectedC);
	SetTimeOut(fn,5000):
		https://www.freecodecamp.org/news/javascript-settimeout-how-to-set-a-timer-in-javascript-or-sleep-for-n-seconds/
	setTimeout() method using named function as its argument
	function greeting(){
	  	console.log("Hello World");
	}
	setTimeout(greeting);
	-Example 1: Display a Text Once After 3 Second
	-The setTimeout() method returns the interval id. For example
		let intervalId = setTimeout(greet, 3000);
		console.log('Id: ' + intervalId); 
	-Example 2: Display Time Every 3 Second
	(https://www.programiz.com/javascript/setInterval)
8.Scope:(https://www.programiz.com/javascript/variable-scope)
	In JavaScript, a variable can also be used without declaring it. If a variable is used without declaring it, that variable automatically becomes a global variable.
	function greet() {
    		a = "hello"
	}
	greet();
	console.log(a); // hello
	Note: In JavaScript, there is "strict mode"; in which a variable cannot be used without declaring it. To learn more about strict, visit JavaScript Strict.
	
	
8.this keyword
	this represents window object in browser
	this epresents context of execution - function calling from some object context
9.call, bind, apply
10.async,await

