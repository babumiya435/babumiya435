
CSS:

1.Pseudo classes and elements
     Pseudo classes:
	https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Pseudo-classes_and_pseudo-elements
	A pseudo-class is a selector that selects elements that are in a specific state, e.g. they are the first element of their type, or they are being hovered over by the mouse pointer. They tend to act as if you had applied a class to some part of your document, often helping you cut down on excess classes in your markup, and giving you more flexible, maintainable code
	Pseudo-classes are keywords that start with a colon. For example, (:hover & :first-child) are pseudo-classes.
		article p:first-child {
    				font-size: 120%;
    				font-weight: bold;}	
	-User-action pseudo classes
		:hover
		:focus
     Pseudo-elements:
	Pseudo-elements behave in a similar way. However, they act as if you had added a whole new HTML element into the markup, rather than applying a class to existing elements.
	Pseudo-elements start with a double colon :: , (::before) is an example of a pseudo-element.
	article p::first-line {
    		font-size: 120%;
    		font-weight: bold;} 
	It acts as if a <span> was magically wrapped around that first formatted line, and updated each time the line length changed
	article p:first-child::first-line {
  		font-size: 120%;
  		font-weight: bold;}

	https://www.growingwiththeweb.com/2012/08/pseudo-classes-vs-pseudo-elements.html
	Pseudo-classes select regular elements but under certain conditions, like when their position relative to siblings or when they’re under a particular state. 
	Here is a list of pseudo-classes in CSS3:
		-Dynamic pseudo-classes:
			:link
			:visited
			:hover
			:active
			:focus
		-UI element states pseudo-classes:
			:enabled
			:disabled
			:checked
		-Structural pseudo-classes:
			:first-child
			:nth-child(n)
			:nth-last-child(n)
			:nth-of-type(n)
			:nth-last-of-type(n)
			:last-child
			:first-of-type
			:last-of-type
			:only-child
			:only-of-type
			:root
			:empty
		-Other pseudo-classes:
			:not(x)
			:target
			:lang(language)

	Pseudo-elements effectively create new elements that are not specified in the markup of the document and can be manipulated much like a regular element. This introduces huge benefits for creating cool effects with minimal markup, also aiding significantly in keeping the presentation of the document out of the HTML and in CSS where it belongs.

	With the introduction of CSS3 the difference between pseudo-classes and pseudo-elements is a lot more clear as it is now the standard to use double colon (::) on pseudo-elements, however we should be using single colon until certain browsers are phased out (I’m looking at you IE8 and below). Here is a list of pseudo-elements in CSS3:
		-Here is a list of pseudo-elements in CSS3:
			::before
			::after
			::first-letter
			::first-line
		-Animations on pseudo-elements:
		Unfortunately animations and transitions on pseudo elements are buggy or not implemented at the moment in most browsers.

	https://javascript.plainenglish.io/the-difference-between-pseudo-classes-and-pseudo-elements-of-css-properties-e408fcbd68a0

JS:

1.Arrow fn vs Normal fn
2.Map , filter, reduce methods
3.Call back and call back hell
4.Hoisting with example
5.Virtual dom vs real dom
6.Event loop , call stack, stack queue
7.promise, settimeout
8.this keyword
9.call, bind, apply

React:

1.Hooks
2.Pure component
3.Controlled vs uncontrolled component
4.what is heigher order component
5.problem drilling
6.passing data from child to parent vise versa
7.Redux
8.Life cycle hooks

Angular:

1.passing data from child to parent vise versa
2.Life cycle hooks
